{
    extends(".*_command")=command
    parserClass="io.github.vudsen.arthasui.language.arthas.psi.ArthasParser"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Arthas"
    psiImplClassSuffix="Impl"
    psiPackage="io.github.vudsen.arthasui.language.arthas.psi"
    psiImplPackage="io.github.vudsen.arthasui.language.arthas.psi.impl"

    elementTypeHolderClass="io.github.vudsen.arthasui.language.arthas.psi.ArthasTypes"
    elementTypeClass="io.github.vudsen.arthasui.language.arthas.psi.ArthasElementType"
    tokenTypeClass="io.github.vudsen.arthasui.language.arthas.psi.ArthasTokenType"

    tokens=[
        semicolon=';'
        dot='.'
        space='regexp:\s+'
        string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"

        COMMAND_AUTH='auth'
        COMMAND_BASE64='base64'
        COMMAND_CAT='cat'
        COMMAND_CLASSLOADER='classloader'
        COMMAND_CLS='cls'
        COMMAND_DASHBOARD='dashboard'
        COMMAND_DUMP='dump'
        COMMAND_ECHO='echo'
        COMMAND_GETSTATIC='getstatic'
        COMMAND_GREP='grep'
        COMMAND_HEAPDUMP='heapdump'
        COMMAND_HELP='help'
        COMMAND_HISTORY='history'
        COMMAND_JAD='jad'
        COMMAND_JFR='jfr'
        COMMAND_JVM='jvm'
        COMMAND_KEYMAP='keymap'
        COMMAND_LOGGER='logger'
        COMMAND_MBEAN='mbean'
        COMMAND_MC='mc'
        COMMAND_MEMORY='memory'
        COMMAND_MONITOR='monitor'
        COMMAND_OPTIONS='options'
        COMMAND_OGNL='ognl'
        COMMAND_PERFCOUNTER='perfcounter'
        COMMAND_PROFILER='profiler'
        COMMAND_PWD='pwd'
        COMMAND_QUIT='quit'
        COMMAND_REDEFINE='redefine'
        COMMAND_RESET='reset'
        COMMAND_RETRANSFORM='retransform'
        COMMAND_SC='sc'
        COMMAND_SESSION='session'
        COMMAND_SM='sm'
        COMMAND_STACK='stack'
        COMMAND_STOP='stop'
        COMMAND_SYSENV='sysenv'
        COMMAND_SYSPROP='sysprop'
        COMMAND_TEE='tee'
        COMMAND_THREAD='thread'
        COMMAND_TRACE='trace'
        COMMAND_TT='tt'
        COMMAND_VERSION='version'
        COMMAND_VMOPTION='vmoption'
        COMMAND_VMTOOL='vmtool'
        COMMAND_WATCH='watch'

        line_comment="regexp://.*"
        ARGUMENT_HEAD='regexp:-[a-zA-Z]+'
        CLASS_PATTERN='regexp:[a-zA-Z\d]+(\.[a-zA-Z\d]+)*'
        IDENTIFIER='regexp:[a-zA-Z\d]+'
        NON_WHITESPACE_SEQUENCE='regexp:[^\n ]+'
        FILE_PATH = ""
    ]
}


root ::= root_item*
private root_item ::= !<<eof>> command semicolon {pin=1}

private recover ::= !(
    'auth' | 'base64' | 'cat' | 'classloader' | 'cls' |
    'dashboard' | 'dump' | 'echo' | 'getstatic' | 'grep' | 'heapdump' | 'history' | 'jad' | 'jfr' | 'jvm' | 'keymap' |
    'logger' | 'mbean' | 'mc' | 'memory' | 'monitor' | 'ognl' | 'options' | 'perfcounter' | 'help' |
    'profiler' | 'pwd' | 'quit' | 'redefine' | 'reset' | 'retransform' | 'sc' | 'session' | 'sm' | 'stack' |
    'stop' | 'sysenv' | 'sysprop' | 'tee' | 'thread' | 'trace' | 'tt' | 'version' | 'vmoption' | 'vmtool' | 'watch' | ';'
)
command ::= auth_command
    | base64_command
    | cat_command
    | classloader_command
    | cls_command
    | dashboard_command
    | dump_command
    | echo_command
    | getstatic_command
    | grep_command
    | heapdump_command
    | history_command
    | help_command
    | jad_command
    | jfr_command
    | jvm_command
    | keymap_command
    | logger_command
    | mbean_command
    | mc_command
    | memory_command
    | monitor_command
    | ognl_command
    | options_command
    | perfcounter_command
    | profiler_command
    | pwd_command
    | quit_command
    | redefine_command
    | reset_command
    | retransform_command
    | sc_command
    | session_command
    | sm_command
    | stack_command
    | stop_command
    | sysenv_command
    | sysprop_command
    | tee_command
    | thread_command
    | trace_command
    | tt_command
    | version_command
    | vmoption_command
    | vmtool_command
    | watch_command{recoverWhile=recover name="Command" methods=[getCommand="/expr[0]"]}


// alias
private tip_ognl ::= string {name='Ognl Expression'}
private tip_auth_pwd ::= NON_WHITESPACE_SEQUENCE {name='Password'}
private tip_clazz ::= CLASS_PATTERN {name="Class"}
private tip_method ::= IDENTIFIER {name='Method'}
private tip_any_seq ::= NON_WHITESPACE_SEQUENCE {name='Any Characters'}
private tip_method_or_field ::= IDENTIFIER {name='Method Or Field'}
private tip_argument_value ::= NON_WHITESPACE_SEQUENCE {name='Argument Value'}
private tip_thread_id ::= IDENTIFIER {name='Thread ID'}
private tip_name ::= NON_WHITESPACE_SEQUENCE {name='name'}
private tip_value ::= NON_WHITESPACE_SEQUENCE {name='value'}
private tip_command ::= IDENTIFIER {name='Command'}
private tip_action ::= IDENTIFIER {name='Action'}
private tip_filepath ::= FILE_PATH {name='FilePath'}
private tip_wait_count ::= IDENTIFIER {name='Count'}

clazz ::= tip_clazz

// common
argument ::= ARGUMENT_HEAD tip_argument_value? {
    methods=[
        name="argumentHead"
        value="identifier"
    ]
}

// expressions
auth_command ::= 'auth' argument* tip_auth_pwd argument* {
    methods=[
        password="nonWhitespaceSequence"
    ]
}
watch_command ::= 'watch' argument* clazz tip_method tip_ognl? argument* {
    methods=[
        ognl="string"
        clazz="CLASS_PATTERN"
        method="identifier"
    ]
}
help_command ::= 'help'
cat_command ::= 'cat' tip_any_seq {
    methods=[
        content="nonWhitespaceSequence"
    ]
}
classloader_command ::= 'classloader' argument*
cls_command ::= 'cls'
dashboard_command ::= 'dashboard' argument*
echo_command ::= 'echo' string
heapdump_command ::= 'heapdump' argument* tip_any_seq? argument* {
  methods=[
      filePath="nonWhitespaceSequence"
  ]
}
history_command ::= 'history' argument* tip_wait_count? argument*
jad_command ::= 'jad' argument* tip_clazz tip_method? argument* {
  methods=[
      clazz="CLASS_PATTERN"
  ]
}
jvm_command ::= 'jvm'
keymap_command ::= 'keymap'
logger_command ::= 'logger' argument*
mc_command ::= 'mc' argument* tip_any_seq argument* {
  methods=[
      filePath="nonWhitespaceSequence"
  ]
}
memory_command ::= 'memory'
ognl_command ::= 'ognl' argument* tip_ognl argument* {
    methods=[
        ognl="string"
    ]
}
pwd_command ::= 'pwd'
quit_command ::= 'quit'
retransform_command ::= 'retransform' argument* tip_filepath argument* {
  methods=[
      filePath="nonWhitespaceSequence"
  ]
}
sc_command ::= 'sc' argument* tip_clazz tip_method? argument* {
    methods=[
        clazz="CLASS_PATTERN"
        method="identifier"
    ]
}
session_command ::= 'session'
sm_command ::= 'sm' argument* tip_clazz tip_method? argument* {
    methods=[
        clazz="CLASS_PATTERN"
        method="IDENTIFIER"
    ]
}
stack_command ::= 'stack' argument* tip_clazz tip_method tip_ognl? argument* {
    methods=[
        ognl="string"
        clazz="CLASS_PATTERN"
        method="identifier"
    ]
}
stop_command ::= 'stop'
sysenv_command ::= 'sysenv' tip_any_seq?
// TODO
sysprop_command ::= 'sysprop' (tip_name tip_value?)?
thread_command ::= 'thread' argument* tip_thread_id? argument*
trace_command ::= 'trace' argument* tip_clazz tip_method tip_ognl? argument* {
    methods=[
        ognl="string"
        clazz="CLASS_PATTERN"
        method="IDENTIFIER"
    ]
}
tt_command ::= 'tt' argument* (tip_clazz tip_method)? argument* {
    methods=[
        clazz="CLASS_PATTERN"
        method="IDENTIFIER"
    ]
}
version_command ::= 'version'
vmoption_command ::= 'vmoption' (tip_name tip_value?)?
base64_command ::= 'base64' argument* (tip_any_seq argument*)?
dump_command ::= 'dump' argument* (tip_clazz argument*)? {
    methods=[
        clazz="CLASS_PATTERN"
    ]
}
getstatic_command ::= 'getstatic' argument* tip_clazz tip_method_or_field tip_ognl? argument* {
    methods=[
        ognl="string"
        clazz="CLASS_PATTERN"
        method="IDENTIFIER"
    ]
}
grep_command ::= 'grep' argument* tip_any_seq* argument*
jfr_command ::= 'jfr' argument* tip_command argument*
mbean_command ::= 'mbean' tip_any_seq*
monitor_command ::= 'monitor' argument* tip_clazz tip_method argument*
options_command ::= 'options' (tip_name tip_value?)?
perfcounter_command ::= 'perfcounter' argument*
profiler_command ::= 'profiler' argument* tip_action argument*
redefine_command ::= 'redefine' argument* tip_filepath+ argument*
reset_command ::= 'reset' argument* (tip_clazz argument*)?
tee_command ::= 'tee' tip_any_seq*
vmtool_command ::= 'vmtool' argument*
