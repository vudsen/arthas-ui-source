// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _ArthasLexer.flex

package io.github.vudsen.arthasui.language.arthas;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;import com.intellij.ui.mac.foundation.ID;

import java.util.Stack;import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static io.github.vudsen.arthasui.language.arthas.psi.ArthasTypes.*;


public class _ArthasLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CLAZZ_METHOD_PAIR_1 = 2;
  public static final int CLAZZ_METHOD_PAIR_2 = 4;
  public static final int WAITING_ARGUMENT_VALYE = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\5\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\1\u0e00\3\u0100\1\u0f00\17\u0100\1\u1000\165\u0100\1\u0600\1\u0100"+
    "\1\u1100\1\u1200\1\u1300\1\u1400\54\u0100\10\u1500\37\u0100\1\u0a00"+
    "\4\u0100\1\u1600\10\u0100\1\u1700\2\u0100\1\u1800\1\u1900\1\u1400"+
    "\1\u0100\1\u0500\1\u0100\1\u1a00\1\u1700\1\u0900\3\u0100\1\u1300"+
    "\1\u1b00\114\u0100\1\u1c00\1\u1300\153\u0100\1\u1d00\11\u0100\1\u1e00"+
    "\1\u1400\6\u0100\1\u1300\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\3\22\0\1\4\1\0\1\5"+
    "\4\0\1\6\5\0\1\7\1\10\1\11\4\12\1\13"+
    "\1\12\1\14\3\12\1\0\1\15\5\0\32\16\1\0"+
    "\1\17\4\0\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\16\1\47\1\16\12\0\1\3\32\0\1\1"+
    "\u01bf\0\12\12\206\0\12\12\306\0\12\12\234\0\12\12"+
    "\166\0\12\12\140\0\12\12\166\0\12\12\106\0\12\12"+
    "\u0116\0\12\12\106\0\12\12\346\0\1\1\u015f\0\12\12"+
    "\46\0\12\12\u012c\0\12\12\200\0\12\12\246\0\12\12"+
    "\6\0\12\12\266\0\12\12\126\0\12\12\206\0\12\12"+
    "\6\0\12\12\246\0\13\1\35\0\2\3\5\0\1\1"+
    "\57\0\1\1\240\0\1\1\u01cf\0\12\12\46\0\12\12"+
    "\306\0\12\12\26\0\12\12\126\0\12\12\u0196\0\12\12"+
    "\6\0\u0100\50\240\0\12\12\206\0\12\12\u012c\0\12\12"+
    "\200\0\12\12\74\0\12\12\220\0\12\12\166\0\12\12"+
    "\146\0\12\12\206\0\12\12\106\0\12\12\266\0\12\12"+
    "\u0164\0\62\12\100\0\12\12\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[7936];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\3\1\1\3\1\1\1\4\1\5"+
    "\23\4\1\6\1\2\1\6\1\7\1\10\1\11\1\0"+
    "\1\12\1\1\1\0\1\1\1\13\1\14\21\4\1\15"+
    "\10\4\1\16\1\4\1\17\5\4\1\20\3\4\1\21"+
    "\1\0\1\12\2\0\1\14\2\4\1\22\1\4\1\23"+
    "\10\4\1\24\1\25\1\26\10\4\1\27\10\4\1\30"+
    "\6\4\1\31\3\4\1\32\1\33\1\4\1\34\1\4"+
    "\1\35\5\4\1\36\3\4\1\37\5\4\1\40\20\4"+
    "\1\41\5\4\1\42\2\4\1\43\3\4\1\44\3\4"+
    "\1\45\1\46\5\4\1\47\1\50\1\51\6\4\1\52"+
    "\1\4\1\53\2\4\1\54\4\4\1\55\1\56\4\4"+
    "\1\57\1\60\1\61\4\4\1\62\1\4\1\63\1\64"+
    "\3\4\1\65\1\66\2\4\1\67\3\4\1\70\1\71"+
    "\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f"+
    "\0\u0148\0\u0171\0\244\0\u019a\0\u01c3\0\244\0\u01ec\0\u0215"+
    "\0\u023e\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d"+
    "\0\u0386\0\u03af\0\u03d8\0\u0401\0\u042a\0\u0453\0\u047c\0\u04a5"+
    "\0\u04ce\0\u04f7\0\u04f7\0\u0520\0\u0549\0\u0572\0\u059b\0\u05c4"+
    "\0\244\0\u05ed\0\u0616\0\u063f\0\u0171\0\u0668\0\u0691\0\u06ba"+
    "\0\u06e3\0\u070c\0\u0735\0\u075e\0\u0787\0\u07b0\0\u07d9\0\u0802"+
    "\0\u082b\0\u0854\0\u087d\0\u08a6\0\u08cf\0\u08f8\0\u0921\0\u01c3"+
    "\0\u094a\0\u0973\0\u099c\0\u09c5\0\u09ee\0\u0a17\0\u0a40\0\u0a69"+
    "\0\u01c3\0\u0a92\0\u01c3\0\u0abb\0\u0ae4\0\u0b0d\0\u0b36\0\u0b5f"+
    "\0\u01c3\0\u0b88\0\u0bb1\0\u0bda\0\u0520\0\u0c03\0\u04f7\0\u0c2c"+
    "\0\u0c55\0\u0c7e\0\u0ca7\0\u0cd0\0\u01c3\0\u0cf9\0\u01c3\0\u0d22"+
    "\0\u0d4b\0\u0d74\0\u0d9d\0\u0dc6\0\u0def\0\u0e18\0\u0e41\0\u01c3"+
    "\0\u01c3\0\u01c3\0\u0e6a\0\u0e93\0\u0ebc\0\u0ee5\0\u0f0e\0\u0f37"+
    "\0\u0f60\0\u0f89\0\u01c3\0\u0fb2\0\u0fdb\0\u1004\0\u102d\0\u1056"+
    "\0\u107f\0\u10a8\0\u10d1\0\u01c3\0\u10fa\0\u1123\0\u114c\0\u1175"+
    "\0\u119e\0\u11c7\0\u01c3\0\u11f0\0\u1219\0\u1242\0\u01c3\0\u01c3"+
    "\0\u126b\0\u01c3\0\u1294\0\u01c3\0\u12bd\0\u12e6\0\u130f\0\u1338"+
    "\0\u1361\0\u01c3\0\u138a\0\u13b3\0\u13dc\0\u01c3\0\u1405\0\u142e"+
    "\0\u1457\0\u1480\0\u14a9\0\u01c3\0\u14d2\0\u14fb\0\u1524\0\u154d"+
    "\0\u1576\0\u159f\0\u15c8\0\u15f1\0\u161a\0\u1643\0\u166c\0\u1695"+
    "\0\u16be\0\u16e7\0\u1710\0\u1739\0\u01c3\0\u1762\0\u178b\0\u17b4"+
    "\0\u17dd\0\u1806\0\u01c3\0\u182f\0\u1858\0\u01c3\0\u1881\0\u18aa"+
    "\0\u18d3\0\u01c3\0\u18fc\0\u1925\0\u194e\0\u01c3\0\u01c3\0\u1977"+
    "\0\u19a0\0\u19c9\0\u19f2\0\u1a1b\0\u01c3\0\u01c3\0\u01c3\0\u1a44"+
    "\0\u1a6d\0\u1a96\0\u1abf\0\u1ae8\0\u1b11\0\u01c3\0\u1b3a\0\u01c3"+
    "\0\u1b63\0\u1b8c\0\u01c3\0\u1bb5\0\u1bde\0\u1c07\0\u1c30\0\u01c3"+
    "\0\u01c3\0\u1c59\0\u1c82\0\u1cab\0\u1cd4\0\u01c3\0\u01c3\0\u01c3"+
    "\0\u1cfd\0\u1d26\0\u1d4f\0\u1d78\0\u01c3\0\u1da1\0\u01c3\0\u01c3"+
    "\0\u1dca\0\u1df3\0\u1e1c\0\u01c3\0\u01c3\0\u1e45\0\u1e6e\0\u01c3"+
    "\0\u1e97\0\u1ec0\0\u1ee9\0\u01c3\0\u01c3\0\u01c3";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\3\15\1\16\1\15\1\5\1\17\1\20"+
    "\1\21\1\22\1\23\1\15\1\24\1\25\1\15\1\26"+
    "\1\27\1\30\1\31\1\15\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\15\1\40\1\41\1\15\1\5\4\42"+
    "\1\43\2\42\1\44\2\42\3\45\1\42\1\45\1\42"+
    "\30\45\5\42\1\43\5\42\3\46\1\42\1\46\1\42"+
    "\30\46\5\42\1\43\5\42\3\47\1\42\1\47\1\42"+
    "\30\47\1\42\2\5\1\0\1\5\1\0\45\5\1\6"+
    "\1\7\1\6\1\7\44\5\1\0\4\7\44\0\2\10"+
    "\1\50\1\10\1\50\1\51\11\10\1\52\31\10\2\11"+
    "\1\53\1\11\1\53\1\11\1\51\10\11\1\54\31\11"+
    "\2\5\1\0\1\5\1\0\11\5\1\55\1\5\30\55"+
    "\3\5\1\0\1\5\1\0\4\5\1\56\41\5\1\0"+
    "\1\5\1\0\5\5\3\15\1\5\1\15\1\5\30\15"+
    "\3\5\1\0\1\5\1\0\5\5\3\15\1\5\1\15"+
    "\1\5\24\15\1\57\3\15\3\5\1\0\1\5\1\0"+
    "\5\5\3\15\1\5\1\15\1\5\1\60\27\15\3\5"+
    "\1\0\1\5\1\0\5\5\3\15\1\5\1\15\1\5"+
    "\1\61\12\15\1\62\14\15\3\5\1\0\1\5\1\0"+
    "\5\5\3\15\1\5\1\15\1\5\1\63\23\15\1\64"+
    "\3\15\3\5\1\0\1\5\1\0\5\5\3\15\1\5"+
    "\1\15\1\5\2\15\1\65\25\15\3\5\1\0\1\5"+
    "\1\0\5\5\3\15\1\5\1\15\1\5\4\15\1\66"+
    "\14\15\1\67\6\15\3\5\1\0\1\5\1\0\5\5"+
    "\3\15\1\5\1\15\1\5\4\15\1\70\3\15\1\71"+
    "\17\15\3\5\1\0\1\5\1\0\5\5\3\15\1\5"+
    "\1\15\1\5\1\72\4\15\1\73\17\15\1\74\2\15"+
    "\3\5\1\0\1\5\1\0\5\5\3\15\1\5\1\15"+
    "\1\5\4\15\1\75\23\15\3\5\1\0\1\5\1\0"+
    "\5\5\3\15\1\5\1\15\1\5\16\15\1\76\11\15"+
    "\3\5\1\0\1\5\1\0\5\5\3\15\1\5\1\15"+
    "\1\5\1\15\1\77\1\100\1\15\1\101\23\15\3\5"+
    "\1\0\1\5\1\0\5\5\3\15\1\5\1\15\1\5"+
    "\6\15\1\102\10\15\1\103\10\15\3\5\1\0\1\5"+
    "\1\0\5\5\3\15\1\5\1\15\1\5\4\15\1\104"+
    "\14\15\1\105\4\15\1\106\1\15\3\5\1\0\1\5"+
    "\1\0\5\5\3\15\1\5\1\15\1\5\24\15\1\107"+
    "\3\15\3\5\1\0\1\5\1\0\5\5\3\15\1\5"+
    "\1\15\1\5\4\15\1\110\23\15\3\5\1\0\1\5"+
    "\1\0\5\5\3\15\1\5\1\15\1\5\2\15\1\111"+
    "\1\15\1\112\7\15\1\113\6\15\1\114\3\15\1\115"+
    "\3\5\1\0\1\5\1\0\5\5\3\15\1\5\1\15"+
    "\1\5\4\15\1\116\2\15\1\117\11\15\1\120\1\15"+
    "\1\121\4\15\3\5\1\0\1\5\1\0\5\5\3\15"+
    "\1\5\1\15\1\5\4\15\1\122\7\15\1\123\13\15"+
    "\3\5\1\0\1\5\1\0\5\5\3\15\1\5\1\15"+
    "\1\5\1\124\27\15\1\5\67\0\1\125\1\0\30\125"+
    "\11\0\1\126\1\0\3\45\1\0\1\45\1\0\30\45"+
    "\13\0\3\46\1\0\1\46\1\0\30\46\13\0\3\47"+
    "\1\0\1\47\1\0\30\47\1\0\5\50\1\127\11\50"+
    "\1\130\31\50\2\10\1\0\1\5\1\50\43\10\1\5"+
    "\6\53\1\127\10\53\1\131\31\53\2\11\1\0\1\5"+
    "\1\53\43\11\1\5\2\56\1\0\1\5\1\132\43\56"+
    "\3\5\1\0\1\5\1\0\5\5\3\15\1\5\1\15"+
    "\1\5\23\15\1\133\4\15\3\5\1\0\1\5\1\0"+
    "\5\5\3\15\1\5\1\15\1\5\22\15\1\134\5\15"+
    "\3\5\1\0\1\5\1\0\5\5\3\15\1\5\1\15"+
    "\1\5\23\15\1\135\4\15\3\5\1\0\1\5\1\0"+
    "\5\5\3\15\1\5\1\15\1\5\1\136\21\15\1\137"+
    "\5\15\3\5\1\0\1\5\1\0\5\5\3\15\1\5"+
    "\1\15\1\5\22\15\1\140\5\15\3\5\1\0\1\5"+
    "\1\0\5\5\3\15\1\5\1\15\1\5\14\15\1\141"+
    "\13\15\3\5\1\0\1\5\1\0\5\5\3\15\1\5"+
    "\1\15\1\5\7\15\1\142\20\15\3\5\1\0\1\5"+
    "\1\0\5\5\3\15\1\5\1\15\1\5\23\15\1\143"+
    "\4\15\3\5\1\0\1\5\1\0\5\5\3\15\1\5"+
    "\1\15\1\5\4\15\1\144\23\15\3\5\1\0\1\5"+
    "\1\0\5\5\3\15\1\5\1\15\1\5\1\145\12\15"+
    "\1\146\14\15\3\5\1\0\1\5\1\0\5\5\3\15"+
    "\1\5\1\15\1\5\22\15\1\147\5\15\3\5\1\0"+
    "\1\5\1\0\5\5\3\15\1\5\1\15\1\5\3\15"+
    "\1\150\24\15\3\5\1\0\1\5\1\0\5\5\3\15"+
    "\1\5\1\15\1\5\21\15\1\151\6\15\3\5\1\0"+
    "\1\5\1\0\5\5\3\15\1\5\1\15\1\5\14\15"+
    "\1\152\13\15\3\5\1\0\1\5\1\0\5\5\3\15"+
    "\1\5\1\15\1\5\27\15\1\153\3\5\1\0\1\5"+
    "\1\0\5\5\3\15\1\5\1\15\1\5\6\15\1\154"+
    "\21\15\3\5\1\0\1\5\1\0\5\5\3\15\1\5"+
    "\1\15\1\5\4\15\1\155\23\15\3\5\1\0\1\5"+
    "\1\0\5\5\3\15\1\5\1\15\1\5\14\15\1\156"+
    "\13\15\3\5\1\0\1\5\1\0\5\5\3\15\1\5"+
    "\1\15\1\5\15\15\1\157\12\15\3\5\1\0\1\5"+
    "\1\0\5\5\3\15\1\5\1\15\1\5\23\15\1\160"+
    "\4\15\3\5\1\0\1\5\1\0\5\5\3\15\1\5"+
    "\1\15\1\5\21\15\1\161\6\15\3\5\1\0\1\5"+
    "\1\0\5\5\3\15\1\5\1\15\1\5\16\15\1\162"+
    "\11\15\3\5\1\0\1\5\1\0\5\5\3\15\1\5"+
    "\1\15\1\5\3\15\1\163\24\15\3\5\1\0\1\5"+
    "\1\0\5\5\3\15\1\5\1\15\1\5\10\15\1\164"+
    "\17\15\3\5\1\0\1\5\1\0\5\5\3\15\1\5"+
    "\1\15\1\5\3\15\1\165\16\15\1\166\1\167\4\15"+
    "\3\5\1\0\1\5\1\0\5\5\3\15\1\5\1\15"+
    "\1\5\22\15\1\170\5\15\3\5\1\0\1\5\1\0"+
    "\5\5\3\15\1\5\1\15\1\5\1\171\15\15\1\172"+
    "\11\15\3\5\1\0\1\5\1\0\5\5\3\15\1\5"+
    "\1\15\1\5\22\15\1\173\5\15\3\5\1\0\1\5"+
    "\1\0\5\5\3\15\1\5\1\15\1\5\4\15\1\174"+
    "\23\15\3\5\1\0\1\5\1\0\5\5\3\15\1\5"+
    "\1\15\1\5\21\15\1\175\6\15\3\5\1\0\1\5"+
    "\1\0\5\5\3\15\1\5\1\15\1\5\1\176\27\15"+
    "\3\5\1\0\1\5\1\0\5\5\3\15\1\5\1\15"+
    "\1\5\21\15\1\177\6\15\3\5\1\0\1\5\1\0"+
    "\5\5\3\15\1\5\1\15\1\5\16\15\1\200\4\15"+
    "\1\201\4\15\3\5\1\0\1\5\1\0\5\5\3\15"+
    "\1\5\1\15\1\5\23\15\1\202\4\15\1\5\12\0"+
    "\3\45\1\0\1\45\1\0\30\45\1\0\2\50\2\0"+
    "\44\50\1\0\2\53\2\0\44\53\1\0\2\132\2\0"+
    "\44\132\1\0\2\5\1\0\1\5\1\0\5\5\3\15"+
    "\1\5\1\15\1\5\7\15\1\203\20\15\3\5\1\0"+
    "\1\5\1\0\5\5\3\15\1\5\1\15\1\5\4\15"+
    "\1\204\23\15\3\5\1\0\1\5\1\0\5\5\3\15"+
    "\1\5\1\15\1\5\22\15\1\205\5\15\3\5\1\0"+
    "\1\5\1\0\5\5\3\15\1\5\1\15\1\5\7\15"+
    "\1\206\20\15\3\5\1\0\1\5\1\0\5\5\3\15"+
    "\1\5\1\15\1\5\17\15\1\207\10\15\3\5\1\0"+
    "\1\5\1\0\5\5\3\15\1\5\1\15\1\5\16\15"+
    "\1\210\11\15\3\5\1\0\1\5\1\0\5\5\3\15"+
    "\1\5\1\15\1\5\22\15\1\211\5\15\3\5\1\0"+
    "\1\5\1\0\5\5\3\15\1\5\1\15\1\5\17\15"+
    "\1\212\10\15\3\5\1\0\1\5\1\0\5\5\3\15"+
    "\1\5\1\15\1\5\17\15\1\213\10\15\3\5\1\0"+
    "\1\5\1\0\5\5\3\15\1\5\1\15\1\5\17\15"+
    "\1\214\10\15\3\5\1\0\1\5\1\0\5\5\3\15"+
    "\1\5\1\15\1\5\23\15\1\215\4\15\3\5\1\0"+
    "\1\5\1\0\5\5\3\15\1\5\1\15\1\5\14\15"+
    "\1\216\13\15\3\5\1\0\1\5\1\0\5\5\3\15"+
    "\1\5\1\15\1\5\6\15\1\217\21\15\3\5\1\0"+
    "\1\5\1\0\5\5\3\15\1\5\1\15\1\5\1\220"+
    "\27\15\3\5\1\0\1\5\1\0\5\5\3\15\1\5"+
    "\1\15\1\5\16\15\1\221\11\15\3\5\1\0\1\5"+
    "\1\0\5\5\3\15\1\5\1\15\1\5\13\15\1\222"+
    "\14\15\3\5\1\0\1\5\1\0\5\5\3\15\1\5"+
    "\1\15\1\5\10\15\1\223\17\15\3\5\1\0\1\5"+
    "\1\0\5\5\3\15\1\5\1\15\1\5\5\15\1\224"+
    "\22\15\3\5\1\0\1\5\1\0\5\5\3\15\1\5"+
    "\1\15\1\5\5\15\1\225\22\15\3\5\1\0\1\5"+
    "\1\0\5\5\3\15\1\5\1\15\1\5\23\15\1\226"+
    "\4\15\3\5\1\0\1\5\1\0\5\5\3\15\1\5"+
    "\1\15\1\5\4\15\1\227\23\15\3\5\1\0\1\5"+
    "\1\0\5\5\3\15\1\5\1\15\1\5\4\15\1\230"+
    "\23\15\3\5\1\0\1\5\1\0\5\5\3\15\1\5"+
    "\1\15\1\5\21\15\1\231\6\15\3\5\1\0\1\5"+
    "\1\0\5\5\3\15\1\5\1\15\1\5\22\15\1\232"+
    "\5\15\3\5\1\0\1\5\1\0\5\5\3\15\1\5"+
    "\1\15\1\5\2\15\1\233\25\15\3\5\1\0\1\5"+
    "\1\0\5\5\3\15\1\5\1\15\1\5\17\15\1\234"+
    "\10\15\3\5\1\0\1\5\1\0\5\5\3\15\1\5"+
    "\1\15\1\5\4\15\1\235\12\15\1\236\10\15\3\5"+
    "\1\0\1\5\1\0\5\5\3\15\1\5\1\15\1\5"+
    "\4\15\1\237\23\15\3\5\1\0\1\5\1\0\5\5"+
    "\3\15\1\5\1\15\1\5\2\15\1\240\25\15\3\5"+
    "\1\0\1\5\1\0\5\5\3\15\1\5\1\15\1\5"+
    "\22\15\1\241\5\15\3\5\1\0\1\5\1\0\5\5"+
    "\3\15\1\5\1\15\1\5\17\15\1\242\10\15\3\5"+
    "\1\0\1\5\1\0\5\5\3\15\1\5\1\15\1\5"+
    "\16\15\1\243\11\15\3\5\1\0\1\5\1\0\5\5"+
    "\3\15\1\5\1\15\1\5\2\15\1\244\25\15\3\5"+
    "\1\0\1\5\1\0\5\5\2\15\1\245\1\5\1\15"+
    "\1\5\30\15\3\5\1\0\1\5\1\0\5\5\3\15"+
    "\1\5\1\15\1\5\22\15\1\246\5\15\3\5\1\0"+
    "\1\5\1\0\5\5\3\15\1\5\1\15\1\5\1\15"+
    "\1\247\26\15\3\5\1\0\1\5\1\0\5\5\3\15"+
    "\1\5\1\15\1\5\23\15\1\250\4\15\3\5\1\0"+
    "\1\5\1\0\5\5\3\15\1\5\1\15\1\5\3\15"+
    "\1\251\24\15\3\5\1\0\1\5\1\0\5\5\3\15"+
    "\1\5\1\15\1\5\16\15\1\252\11\15\3\5\1\0"+
    "\1\5\1\0\5\5\3\15\1\5\1\15\1\5\1\253"+
    "\27\15\3\5\1\0\1\5\1\0\5\5\3\15\1\5"+
    "\1\15\1\5\4\15\1\254\23\15\3\5\1\0\1\5"+
    "\1\0\5\5\3\15\1\5\1\15\1\5\15\15\1\255"+
    "\12\15\3\5\1\0\1\5\1\0\5\5\3\15\1\5"+
    "\1\15\1\5\21\15\1\256\6\15\3\5\1\0\1\5"+
    "\1\0\5\5\3\15\1\5\1\15\1\5\16\15\1\257"+
    "\11\15\3\5\1\0\1\5\1\0\5\5\3\15\1\5"+
    "\1\15\1\5\2\15\1\260\25\15\3\5\1\0\1\5"+
    "\1\0\5\5\3\15\1\5\1\15\1\5\10\15\1\261"+
    "\17\15\3\5\1\0\1\5\1\0\5\5\3\15\1\5"+
    "\1\15\1\5\5\15\1\262\22\15\3\5\1\0\1\5"+
    "\1\0\5\5\3\15\1\5\1\15\1\5\23\15\1\263"+
    "\4\15\3\5\1\0\1\5\1\0\5\5\3\15\1\5"+
    "\1\15\1\5\1\264\27\15\3\5\1\0\1\5\1\0"+
    "\5\5\3\15\1\5\1\15\1\5\10\15\1\265\17\15"+
    "\3\5\1\0\1\5\1\0\5\5\3\15\1\5\1\15"+
    "\1\5\12\15\1\266\15\15\3\5\1\0\1\5\1\0"+
    "\5\5\3\15\1\5\1\15\1\5\15\15\1\267\12\15"+
    "\3\5\1\0\1\5\1\0\5\5\3\15\1\5\1\15"+
    "\1\5\21\15\1\270\6\15\3\5\1\0\1\5\1\0"+
    "\5\5\3\15\1\5\1\15\1\5\1\271\27\15\3\5"+
    "\1\0\1\5\1\0\5\5\3\15\1\5\1\15\1\5"+
    "\4\15\1\272\23\15\3\5\1\0\1\5\1\0\5\5"+
    "\3\15\1\5\1\15\1\5\10\15\1\273\17\15\3\5"+
    "\1\0\1\5\1\0\5\5\3\15\1\5\1\15\1\5"+
    "\23\15\1\274\4\15\3\5\1\0\1\5\1\0\5\5"+
    "\3\15\1\5\1\15\1\5\16\15\1\275\11\15\3\5"+
    "\1\0\1\5\1\0\5\5\3\15\1\5\1\15\1\5"+
    "\7\15\1\276\20\15\3\5\1\0\1\5\1\0\5\5"+
    "\1\15\1\277\1\15\1\5\1\15\1\5\30\15\3\5"+
    "\1\0\1\5\1\0\5\5\3\15\1\5\1\15\1\5"+
    "\13\15\1\300\14\15\3\5\1\0\1\5\1\0\5\5"+
    "\3\15\1\5\1\15\1\5\16\15\1\301\11\15\3\5"+
    "\1\0\1\5\1\0\5\5\3\15\1\5\1\15\1\5"+
    "\1\302\27\15\3\5\1\0\1\5\1\0\5\5\3\15"+
    "\1\5\1\15\1\5\24\15\1\303\3\15\3\5\1\0"+
    "\1\5\1\0\5\5\3\15\1\5\1\15\1\5\21\15"+
    "\1\304\6\15\3\5\1\0\1\5\1\0\5\5\3\15"+
    "\1\5\1\15\1\5\17\15\1\305\10\15\3\5\1\0"+
    "\1\5\1\0\5\5\3\15\1\5\1\15\1\5\21\15"+
    "\1\306\6\15\3\5\1\0\1\5\1\0\5\5\3\15"+
    "\1\5\1\15\1\5\27\15\1\307\3\5\1\0\1\5"+
    "\1\0\5\5\3\15\1\5\1\15\1\5\15\15\1\310"+
    "\12\15\3\5\1\0\1\5\1\0\5\5\3\15\1\5"+
    "\1\15\1\5\16\15\1\311\11\15\3\5\1\0\1\5"+
    "\1\0\5\5\3\15\1\5\1\15\1\5\13\15\1\312"+
    "\14\15\3\5\1\0\1\5\1\0\5\5\3\15\1\5"+
    "\1\15\1\5\10\15\1\313\17\15\3\5\1\0\1\5"+
    "\1\0\5\5\3\15\1\5\1\15\1\5\15\15\1\314"+
    "\12\15\3\5\1\0\1\5\1\0\5\5\3\15\1\5"+
    "\1\15\1\5\16\15\1\315\11\15\3\5\1\0\1\5"+
    "\1\0\5\5\3\15\1\5\1\15\1\5\25\15\1\316"+
    "\2\15\3\5\1\0\1\5\1\0\5\5\3\15\1\5"+
    "\1\15\1\5\16\15\1\317\11\15\3\5\1\0\1\5"+
    "\1\0\5\5\3\15\1\5\1\15\1\5\3\15\1\320"+
    "\24\15\3\5\1\0\1\5\1\0\5\5\3\15\1\5"+
    "\1\15\1\5\16\15\1\321\11\15\3\5\1\0\1\5"+
    "\1\0\5\5\3\15\1\5\1\15\1\5\10\15\1\322"+
    "\17\15\3\5\1\0\1\5\1\0\5\5\3\15\1\5"+
    "\1\15\1\5\13\15\1\323\14\15\3\5\1\0\1\5"+
    "\1\0\5\5\3\15\1\5\1\15\1\5\16\15\1\324"+
    "\11\15\3\5\1\0\1\5\1\0\5\5\3\15\1\5"+
    "\1\15\1\5\1\325\27\15\3\5\1\0\1\5\1\0"+
    "\5\5\3\15\1\5\1\15\1\5\23\15\1\326\4\15"+
    "\3\5\1\0\1\5\1\0\5\5\3\15\1\5\1\15"+
    "\1\5\14\15\1\327\13\15\3\5\1\0\1\5\1\0"+
    "\5\5\3\15\1\5\1\15\1\5\27\15\1\330\3\5"+
    "\1\0\1\5\1\0\5\5\3\15\1\5\1\15\1\5"+
    "\22\15\1\331\5\15\3\5\1\0\1\5\1\0\5\5"+
    "\3\15\1\5\1\15\1\5\24\15\1\332\3\15\3\5"+
    "\1\0\1\5\1\0\5\5\3\15\1\5\1\15\1\5"+
    "\4\15\1\333\23\15\3\5\1\0\1\5\1\0\5\5"+
    "\3\15\1\5\1\15\1\5\15\15\1\334\12\15\3\5"+
    "\1\0\1\5\1\0\5\5\3\15\1\5\1\15\1\5"+
    "\22\15\1\335\5\15\3\5\1\0\1\5\1\0\5\5"+
    "\3\15\1\5\1\15\1\5\15\15\1\336\12\15\3\5"+
    "\1\0\1\5\1\0\5\5\3\15\1\5\1\15\1\5"+
    "\17\15\1\337\10\15\3\5\1\0\1\5\1\0\5\5"+
    "\3\15\1\5\1\15\1\5\15\15\1\340\12\15\3\5"+
    "\1\0\1\5\1\0\5\5\3\15\1\5\1\15\1\5"+
    "\16\15\1\341\11\15\3\5\1\0\1\5\1\0\5\5"+
    "\3\15\1\5\1\15\1\5\1\342\27\15\3\5\1\0"+
    "\1\5\1\0\5\5\3\15\1\5\1\15\1\5\21\15"+
    "\1\343\6\15\3\5\1\0\1\5\1\0\5\5\3\15"+
    "\1\5\1\15\1\5\10\15\1\344\17\15\3\5\1\0"+
    "\1\5\1\0\5\5\3\15\1\5\1\15\1\5\17\15"+
    "\1\345\10\15\3\5\1\0\1\5\1\0\5\5\3\15"+
    "\1\5\1\15\1\5\15\15\1\346\12\15\3\5\1\0"+
    "\1\5\1\0\5\5\3\15\1\5\1\15\1\5\21\15"+
    "\1\347\6\15\3\5\1\0\1\5\1\0\5\5\3\15"+
    "\1\5\1\15\1\5\4\15\1\350\23\15\3\5\1\0"+
    "\1\5\1\0\5\5\3\15\1\5\1\15\1\5\5\15"+
    "\1\351\22\15\3\5\1\0\1\5\1\0\5\5\3\15"+
    "\1\5\1\15\1\5\15\15\1\352\12\15\3\5\1\0"+
    "\1\5\1\0\5\5\3\15\1\5\1\15\1\5\3\15"+
    "\1\353\24\15\3\5\1\0\1\5\1\0\5\5\3\15"+
    "\1\5\1\15\1\5\3\15\1\354\24\15\3\5\1\0"+
    "\1\5\1\0\5\5\3\15\1\5\1\15\1\5\2\15"+
    "\1\355\25\15\3\5\1\0\1\5\1\0\5\5\3\15"+
    "\1\5\1\15\1\5\23\15\1\356\4\15\3\5\1\0"+
    "\1\5\1\0\5\5\3\15\1\5\1\15\1\5\16\15"+
    "\1\357\11\15\3\5\1\0\1\5\1\0\5\5\3\15"+
    "\1\5\1\15\1\5\22\15\1\360\5\15\3\5\1\0"+
    "\1\5\1\0\5\5\3\15\1\5\1\15\1\5\4\15"+
    "\1\361\23\15\3\5\1\0\1\5\1\0\5\5\3\15"+
    "\1\5\1\15\1\5\4\15\1\362\23\15\3\5\1\0"+
    "\1\5\1\0\5\5\3\15\1\5\1\15\1\5\21\15"+
    "\1\363\6\15\3\5\1\0\1\5\1\0\5\5\3\15"+
    "\1\5\1\15\1\5\21\15\1\364\6\15\3\5\1\0"+
    "\1\5\1\0\5\5\3\15\1\5\1\15\1\5\21\15"+
    "\1\365\6\15\3\5\1\0\1\5\1\0\5\5\3\15"+
    "\1\5\1\15\1\5\14\15\1\366\13\15\1\5";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7954];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\35\1\2\11\4\1\1\0\2\1\1\0\52\1"+
    "\1\0\1\11\2\0\235\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */

    private Stack<Integer> states = new Stack<>();


    private void beginState(int state) {
        states.push(state);
        yybegin(state);
    }

    private void popState() {
        states.pop();
        if (states.isEmpty()) {
            yybegin(YYINITIAL);
        } else {
            yybegin(states.peek());
        }
    }

    public _ArthasLexer() {
      this((java.io.Reader)null);
    }

    private static String zzToPrintable(CharSequence str) {
        return zzToPrintable(str.toString());
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ArthasLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }

  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [133] { return NON_WHITESPACE_SEQUENCE; }");
            { return NON_WHITESPACE_SEQUENCE;
            }
          // fall through
          case 59: break;
          case 2:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [77] { return WHITE_SPACE; }");
            { return WHITE_SPACE;
            }
          // fall through
          case 60: break;
          case 3:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [80] { return DOT; }");
            { return DOT;
            }
          // fall through
          case 61: break;
          case 4:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [132] { return IDENTIFIER; }");
            { return IDENTIFIER;
            }
          // fall through
          case 62: break;
          case 5:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [79] { return SEMICOLON; }");
            { return SEMICOLON;
            }
          // fall through
          case 63: break;
          case 6:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [139] { return BAD_CHARACTER; }");
            { return BAD_CHARACTER;
            }
          // fall through
          case 64: break;
          case 7:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [68] { beginState(CLAZZ_METHOD_PAIR_2); return CLASS_PATTERN; }");
            { beginState(CLAZZ_METHOD_PAIR_2); return CLASS_PATTERN;
            }
          // fall through
          case 65: break;
          case 8:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [71] { popState(); popState(); return IDENTIFIER; }");
            { popState(); popState(); return IDENTIFIER;
            }
          // fall through
          case 66: break;
          case 9:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [64] { popState(); return IDENTIFIER; }");
            { popState(); return IDENTIFIER;
            }
          // fall through
          case 67: break;
          case 10:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [129] { return STRING; }");
            { return STRING;
            }
          // fall through
          case 68: break;
          case 11:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [131] { return ARGUMENT; }");
            { return ARGUMENT;
            }
          // fall through
          case 69: break;
          case 12:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [130] { return LINE_COMMENT; }");
            { return LINE_COMMENT;
            }
          // fall through
          case 70: break;
          case 13:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [100] { return COMMAND_MC; }");
            { return COMMAND_MC;
            }
          // fall through
          case 71: break;
          case 14:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [112] { return COMMAND_SC; }");
            { return COMMAND_SC;
            }
          // fall through
          case 72: break;
          case 15:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [114] { return COMMAND_SM; }");
            { return COMMAND_SM;
            }
          // fall through
          case 73: break;
          case 16:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [122] { return COMMAND_TT; }");
            { return COMMAND_TT;
            }
          // fall through
          case 74: break;
          case 17:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [69] { beginState(WAITING_ARGUMENT_VALYE); return ARGS; }");
            { beginState(WAITING_ARGUMENT_VALYE); return ARGS;
            }
          // fall through
          case 75: break;
          case 18:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [83] { return COMMAND_CAT; }");
            { return COMMAND_CAT;
            }
          // fall through
          case 76: break;
          case 19:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [85] { return COMMAND_CLS; }");
            { return COMMAND_CLS;
            }
          // fall through
          case 77: break;
          case 20:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [94] { return COMMAND_JAD; }");
            { return COMMAND_JAD;
            }
          // fall through
          case 78: break;
          case 21:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [95] { return COMMAND_JFR; }");
            { return COMMAND_JFR;
            }
          // fall through
          case 79: break;
          case 22:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [96] { return COMMAND_JVM; }");
            { return COMMAND_JVM;
            }
          // fall through
          case 80: break;
          case 23:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [107] { return COMMAND_PWD; }");
            { return COMMAND_PWD;
            }
          // fall through
          case 81: break;
          case 24:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [119] { return COMMAND_TEE; }");
            { return COMMAND_TEE;
            }
          // fall through
          case 82: break;
          case 25:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [81] { return COMMAND_AUTH; }");
            { return COMMAND_AUTH;
            }
          // fall through
          case 83: break;
          case 26:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [87] { return COMMAND_DUMP; }");
            { return COMMAND_DUMP;
            }
          // fall through
          case 84: break;
          case 27:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [88] { return COMMAND_ECHO; }");
            { return COMMAND_ECHO;
            }
          // fall through
          case 85: break;
          case 28:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [90] { return COMMAND_GREP; }");
            { return COMMAND_GREP;
            }
          // fall through
          case 86: break;
          case 29:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [92] { return COMMAND_HELP; }");
            { return COMMAND_HELP;
            }
          // fall through
          case 87: break;
          case 30:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [104] { return COMMAND_OGNL; }");
            { return COMMAND_OGNL;
            }
          // fall through
          case 88: break;
          case 31:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [108] { return COMMAND_QUIT; }");
            { return COMMAND_QUIT;
            }
          // fall through
          case 89: break;
          case 32:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [116] { return COMMAND_STOP; }");
            { return COMMAND_STOP;
            }
          // fall through
          case 90: break;
          case 33:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [99] { return COMMAND_MBEAN; }");
            { return COMMAND_MBEAN;
            }
          // fall through
          case 91: break;
          case 34:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [110] { return COMMAND_RESET; }");
            { return COMMAND_RESET;
            }
          // fall through
          case 92: break;
          case 35:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [115] { return COMMAND_STACK; }");
            { return COMMAND_STACK;
            }
          // fall through
          case 93: break;
          case 36:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [121] { return COMMAND_TRACE; }");
            { return COMMAND_TRACE;
            }
          // fall through
          case 94: break;
          case 37:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [103] { beginState(CLAZZ_METHOD_PAIR_1);return COMMAND_WATCH; }");
            { beginState(CLAZZ_METHOD_PAIR_1);return COMMAND_WATCH;
            }
          // fall through
          case 95: break;
          case 38:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [82] { return COMMAND_BASE64; }");
            { return COMMAND_BASE64;
            }
          // fall through
          case 96: break;
          case 39:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [97] { return COMMAND_KEYMAP; }");
            { return COMMAND_KEYMAP;
            }
          // fall through
          case 97: break;
          case 40:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [98] { return COMMAND_LOGGER; }");
            { return COMMAND_LOGGER;
            }
          // fall through
          case 98: break;
          case 41:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [101] { return COMMAND_MEMORY; }");
            { return COMMAND_MEMORY;
            }
          // fall through
          case 99: break;
          case 42:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [117] { return COMMAND_SYSENV; }");
            { return COMMAND_SYSENV;
            }
          // fall through
          case 100: break;
          case 43:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [120] { return COMMAND_THREAD; }");
            { return COMMAND_THREAD;
            }
          // fall through
          case 101: break;
          case 44:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [125] { return COMMAND_VMTOOL; }");
            { return COMMAND_VMTOOL;
            }
          // fall through
          case 102: break;
          case 45:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [93] { return COMMAND_HISTORY; }");
            { return COMMAND_HISTORY;
            }
          // fall through
          case 103: break;
          case 46:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [102] { return COMMAND_OPTIONS; }");
            { return COMMAND_OPTIONS;
            }
          // fall through
          case 104: break;
          case 47:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [113] { return COMMAND_SESSION; }");
            { return COMMAND_SESSION;
            }
          // fall through
          case 105: break;
          case 48:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [118] { return COMMAND_SYSPROP; }");
            { return COMMAND_SYSPROP;
            }
          // fall through
          case 106: break;
          case 49:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [123] { return COMMAND_VERSION; }");
            { return COMMAND_VERSION;
            }
          // fall through
          case 107: break;
          case 50:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [91] { return COMMAND_HEAPDUMP; }");
            { return COMMAND_HEAPDUMP;
            }
          // fall through
          case 108: break;
          case 51:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [106] { return COMMAND_PROFILER; }");
            { return COMMAND_PROFILER;
            }
          // fall through
          case 109: break;
          case 52:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [109] { return COMMAND_REDEFINE; }");
            { return COMMAND_REDEFINE;
            }
          // fall through
          case 110: break;
          case 53:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [86] { return COMMAND_DASHBOARD; }");
            { return COMMAND_DASHBOARD;
            }
          // fall through
          case 111: break;
          case 54:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [89] { return COMMAND_GETSTATIC; }");
            { return COMMAND_GETSTATIC;
            }
          // fall through
          case 112: break;
          case 55:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [124] { return COMMAND_VMOPTIONS; }");
            { return COMMAND_VMOPTIONS;
            }
          // fall through
          case 113: break;
          case 56:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [84] { return COMMAND_CLASSLOADER; }");
            { return COMMAND_CLASSLOADER;
            }
          // fall through
          case 114: break;
          case 57:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [105] { return COMMAND_PERFCOUNTER; }");
            { return COMMAND_PERFCOUNTER;
            }
          // fall through
          case 115: break;
          case 58:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [111] { return COMMAND_RETRANSFORM; }");
            { return COMMAND_RETRANSFORM;
            }
          // fall through
          case 116: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java _ArthasLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        _ArthasLexer scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new _ArthasLexer(reader);
          do {
            System.out.println(scanner.advance());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
